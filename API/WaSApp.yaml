openapi: 3.0.3

info:
  title: "WaSApp"
  description: "Messaging App"
  version: 1.0.0

components:
  schemas:
    Reaction:
      title: Reaction
      description: "Emoji"
      type: object
      properties:
        emoji:
          type: string
          description: "Unicode emoji character"

    User:
      title: User
      description: "User"
      type: object
      properties:
        userId:
          description: "Unique identifier for a user"
          type: integer
          readOnly: true
        name:
          description: "Username"
          type: string
        profilePicture:
          description: "Profile picture of a user"
          type: string
          format: byte
        conversations:
          type: array
          items: { $ref: "#/components/schemas/Conversation" }

    Message:
      title: Message
      type: object
      properties:
        format:
          type: string
          enum: [ "string", "byte" ]
        id:
          description: "Unique identifier for a message"
          type: integer
          readOnly: true
        reactions:
          description: "Emoji reactions that users have added"
          type: array
          items: { $ref: "#/components/schemas/Reaction" }
        state:
          description: "Sent or Read"
          type: string
          enum: [ "Sent", "Read" ]

    Conversation:
      title: Conversation
      description: "Stream of messages between two or more people"
      type: object
      properties:
        messages:
          type: array
          items: { $ref: "#/components/schemas/Message" }
        members:
          description: "All the members"
          type: array
          items: { $ref: "#/components/schemas/User" }
        name:
          description: "Name of group/ conversation"
          type: string
          readOnly: false
        id:
          type: integer
          readOnly: true
        picture:
          type: string
          format: byte

    Error:
      type: object
      properties:
        error:
          type: string
          description: "Human-readable error message"

  parameters:
    userId:
      schema:
        type: integer
        readOnly: true
      name: id
      in: path
      required: true
      description: User Identifier

    conversationId:
      schema:
        type: integer
        readOnly: true
      name: convId
      in: path
      required: true
      description: Conversation Identifier

    messageId:
      schema:
        type: integer
        readOnly: true
      name: msgId
      in: path
      required: true
      description: Message Identifier

paths:
  /session:
    post:
      tags: [ "login" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
        '400':
          description: Invalid input (e.g., name too short)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      tags: [ "users" ]
      summary: "List all users or search users by name"
      description: |
        Retrieves a list of users. 
        If a `name` query parameter is provided, returns only users whose names match or contain the given string.
      operationId: listUsers
      parameters:
        - name: name
          in: query
          description: Filter users by name (partial matches allowed)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of users (possibly filtered by name)
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/User"
        "400":
          description: Bad Request - Invalid query parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /user/{id}/:
    parameters:
      - $ref: "#/components/parameters/userId"
    put:
      tags: [ "users" ]
      summary: Changes username by id
      description: "Change your own username to whatever you want"
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: "New name to be assigned"
              required:
                - newName
      responses:
        '200':
          description: User ID updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: Conflict - New ID already in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      tags: [ "conversations" ]
      operationId: getMyConversations
      summary: Get all conversations that include user
      responses:
        "200":
          description: "Array of all the conversations the user is included in"
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Conversation" }
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/photo:
    parameters:
      - $ref: "#/components/parameters/userId"
    put:
      tags: [ "users" ]
      summary: Change photo
      description: Changes a user's current profile picture
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPic:
                  type: string
                  format: byte
              required:
                - newPic
      responses:
        "200":
          description: Profile picture updated
        "400":
          description: Bad Request - Invalid image or input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: [ "conversations" ]
      operationId: getConversation
      summary: Open conversation by name
      parameters:
        - name: conversationName
          in: query
          description: Conversation name to filter
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
        "400":
          description: Bad Request - Invalid query parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: No conversation found matching the criteria or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags: [ "conversations" ]
      summary: Start a new conversation
      operationId: createGroup
      requestBody:
        required: false
        description: Optional payload to specify initial conversation details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name of the new group"
                members:
                  type: array
                  items:
                    type: integer
      responses:
        "201":
          description: conversation created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Invalid request (e.g., invalid members format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
    post:
      tags: [ "messages" ]
      summary: Send a message
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: "Message content"
                format:
                  type: string
                  enum: ["string","byte"]
      responses:
        "204":
          description: Message Sent
        "400":
          description: Bad request (e.g., missing content)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User or conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags: [ "messages" ]
      summary: Delete the most recent message or a specified message
      operationId: deleteMessage
      parameters:
        - name: msgId
          in: query
          description: "If provided, delete this specific message"
          schema:
            type: integer
      responses:
        "204":
          description: Message Deleted
        "400":
          description: Bad Request - no messageId and no recent message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Conversation or message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/messages/{msgId}/forward:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageId'
    post:
      tags: [ "messages" ]
      summary: Forward a message to another conversation
      operationId: forwardMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetConversationId:
                  type: integer
                  description: "ID of the conversation to forward the message to"
      responses:
        "204":
          description: Message forwarded successfully
        "400":
          description: Bad request (e.g., missing targetConversationId)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User, source message, or target conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/messages/{msgId}/comment:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageId'
    post:
      tags: [ "comments" ]
      summary: Add a comment to a message
      operationId: commentMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentText:
                  type: string
                  description: "Comment text"
      responses:
        "201":
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentId:
                    type: integer
                    description: "Identifier of the newly created comment"
        "400":
          description: Bad request (e.g., missing commentText)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User, conversation, or message not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/messages/{msgId}/comment/{commentId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageId'
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
        description: Comment Identifier
    delete:
      tags: [ "comments" ]
      summary: Remove a comment from a message
      operationId: uncommentMessage
      responses:
        "204":
          description: Comment removed
        "404":
          description: User, conversation, message or comment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/members:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
    post:
      tags: [ "conversations" ]
      summary: Add a user to a group
      operationId: addToGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIdToAdd:
                  type: integer
                  description: "User ID of the member to add"
      responses:
        "200":
          description: User added to the group
        "400":
          description: Bad request (e.g., invalid userIdToAdd)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User or conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already in group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags: [ "conversations" ]
      summary: Leave a group
      operationId: leaveGroup
      responses:
        "204":
          description: User left the group
        "404":
          description: User or conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/name:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
    put:
      tags: [ "conversations" ]
      summary: Set the group name
      operationId: setGroupName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: "The new name of the group"
      responses:
        "200":
          description: Group name updated
        "400":
          description: Bad request (e.g., empty newName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Conversation or user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{id}/conversations/{convId}/photo:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/conversationId'
    put:
      tags: [ "conversations" ]
      summary: Set the group photo
      operationId: setGroupPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPhoto:
                  type: string
                  format: byte
      responses:
        "200":
          description: Group photo updated
        "400":
          description: Bad request (e.g., invalid photo format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User or conversation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
