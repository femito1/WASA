openapi: 3.0.3

info:
  title: "WaSApp"
  description: "Messaging App"
  version: 1.0.0

components:
  schemas:

    Reaction:
      title: Reaction
      description: "Emoji"
      type: object

    User:
      title: User
      description: "User"
      type: object
      properties:

        userId:
          description: "Unique identifier for users"
          type: integer
          readOnly: true

        name:
          description: "Username"
          type: string

        profilePicture:
          description: "Profile picture of a user"
          type: string
          format: byte

        conversations:
          type: array
          items: { $ref: "#/components/schemas/Conversation" }

    Message:
      title: Message
      type: object
      properties:

        format:
          type: string
          enum: [ "string", "byte" ]

        id:
          description: "Unique identifier for a message"
          type: integer
          readOnly: true

        reactions:
          description: "Emoji reactions that users have added to the message"
          type: array
          items: { $ref: "#/components/schemas/Reaction" }

        state:
          description: "Sent or Read"
          type: string
          enum: [ "Sent", "Read" ]

    Conversation:
      title: Conversation
      description: "Stream of messages between two or more people"
      type: object
      properties:

        messages:
          type: array
          items: { $ref: "#/components/schemas/Message" }

        members:
          description: "All the members"
          type: array
          items: { $ref: "#/components/schemas/User" }

        name:
          description: "Name of group/ conversation"
          type: string
          readOnly: false

        id:
          type: integer
          readOnly: true

        picture:
          type: string
          format: byte

  parameters:
    userId:
      schema:
        type: integer
        readOnly: true
      name: id
      in: path
      required: true
      description: User Identifier

    conversationID:
      schema:
        type: integer
        readOnly: true
      name: convId
      in: path
      required: true
      description: Conversation Identifier

paths:

  #  /conversations:
  #    post:
  #      summary: Start a new conversation
  #      operationId: createGroup
  #      responses:
  #        "201":
  #          description: converstaion created
  #          content:
  #            application/json:
  #              schema:
  #                $ref: "#/components/schemas/Conversation"


  /user/{id}/:

    parameters:
    - $ref: "#/components/parameters/userId"

    put:
      summary: Changes username by id
      description: "Change your own username to whatever you want"
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: "New name to be assigned"
              required:
              - newName
      responses:
        '200':
          description: User ID updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: Conflict - New ID already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    get:
      operationId: getMyConversations
      summary: Get all conversations that include user
      responses:
        "200":
          description: |
            Array of all the conversations the user is included in
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Conversation" }

  /user/{id}/photo:
    parameters:
    - $ref: "#/components/parameters/userId"
    put:
      summary: Change photo
      description: Changes a user's current profile picture
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPic:
                  type: string
                  format: byte
              required:
              - newPic
      responses:
        "200":
          description: Profile picture updated

  /user/{id}/conversations:
    parameters:
    - $ref: "#/components/parameters/userId"
    get:
      operationId: getConversation
      summary: Open conversation by name
      parameters:
      - name: conversationName
        in: query
        description: Conversation name that is to be considered for filtering
        required: false
        explode: true
        schema:
          type: string

      responses:
        "200":
          description: succesful operation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Conversation" }
    post:
      summary: Start a new conversation
      operationId: createGroup
      responses:
        "201":
          description: converstaion created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"

  /user/{id}/conversations/{id}/:
    parameters:
    - $ref: "#components/parameters/ConversationID"

    post:
      summary: send a message
      operationId: sendMessage
      responses:
        "204":
          description: Message Sent

    delete:
      operationId: deleteMessage
      responses:
        "204":
          description: Message Deleted

  /session:
    post:
      tags: [ "login" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
